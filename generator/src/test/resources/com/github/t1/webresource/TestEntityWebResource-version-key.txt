package com.github.t1.webresource;

import java.util.*;

import javax.ws.rs.Path;
import javax.ejb.Stateless;
import javax.persistence.*;
import javax.persistence.criteria.*;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.persistence.EntityManager;

@Path("/testentities")
@Stateless
public class TestEntityWebResource {
    private final Logger log = LoggerFactory.getLogger(TestEntityWebResource.class);

    @PersistenceContext
    private EntityManager em;

    @GET
    public Response listTestEntity(@Context UriInfo uriInfo) {
        MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();
        log.debug("get testentities where {}", queryParams);

        CriteriaBuilder builder = em.getCriteriaBuilder();
        CriteriaQuery<TestEntity> query = builder.createQuery(TestEntity.class);
        Root<TestEntity> from = query.from(TestEntity.class);
        Predicate where = null;
        for (String key : queryParams.keySet()) {
            Predicate predicate = builder.equal(from.get(key), queryParams.getFirst(key));
            if (where == null) {
                where = predicate;
            } else {
                where = builder.and(where, predicate);
            }
        }
        if (where != null)
            query.where(where);
        List<TestEntity> list = em.createQuery(query.select(from)).getResultList();
        GenericEntity<List<TestEntity>> genericEntity = new GenericEntity<List<TestEntity>>(list) {};

        return Response.ok(genericEntity).build();
    }

    @GET
    @Path("/{key}")
    public Response getTestEntity(@PathParam("key") String key, @Context Request request) {
        log.debug("get testentity {}", key);

        TestEntity result = findByKey(key);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }

        EntityTag eTag = new EntityTag(Objects.toString(result.getVersion()));
        ResponseBuilder failed = request.evaluatePreconditions(eTag);
        if (failed != null) {
            return failed.entity(result).build();
        }

        return Response.ok(result).tag(Objects.toString(result.getVersion())).build();
    }

    private TestEntity findByKey(String key) {
        TypedQuery<TestEntity> query = em.createQuery("FROM TestEntity WHERE key = :key", TestEntity.class);
        try {
            return query.setParameter("key", key).getSingleResult();
        } catch (NoResultException e) {
            return null;
        }
    }

    @POST
    public Response postTestEntity(TestEntity testentity, @Context UriInfo uriInfo) {
        log.debug("post testentity {}", testentity);

        if (testentity.getId() == null) {
            em.persist(testentity);
        } else {
            testentity = em.merge(testentity);
        }
        em.flush();

        UriBuilder builder = uriInfo.getBaseUriBuilder();
        builder.path("testentities").path(Objects.toString(testentity.getKey()));
        return Response.created(builder.build()).tag(Objects.toString(testentity.getVersion())).build();
    }

    @PUT
    @Path("/{key}")
    public Response putTestEntity(@PathParam("key") String key, TestEntity testentity, @Context Request request) {
        log.debug("put testentity key {}: {}", key, testentity);

        if (testentity.getKey() == null) {
            testentity.setKey(key);
        } else if (!testentity.getKey().equals(key)) {
            String message = "key conflict! path=" + key + ", body=" + testentity.getKey() + ".\n"
                + "either leave the key in the body null or set it to the same key";
            return Response.status(Status.BAD_REQUEST).entity(message).build();
        }
        if (testentity.getId() == null) {
            TestEntity existing = findByKey(key);
            if (existing == null) {
                return Response.status(Status.NOT_FOUND).build();
            }
            testentity.setId(existing.getId());
            if (testentity.getVersion() == null) {
                testentity.setVersion(existing.getVersion());
            }
        }

        EntityTag eTag = new EntityTag(Objects.toString(testentity.getVersion()));
        ResponseBuilder failed = request.evaluatePreconditions(eTag);
        if (failed != null) {
            return failed.entity(testentity).build();
        }

        TestEntity result = em.merge(testentity);
        em.flush();

        if (result == null) {
            throw new IllegalStateException("expected to be able to merge key " + key);
        }
        return Response.ok(result).tag(Objects.toString(result.getVersion())).build();
    }

    @DELETE
    @Path("/{key}")
    public Response deleteTestEntity(@PathParam("key") String key, @Context Request request) {
        log.debug("delete testentity {}", key);

        TestEntity result = findByKey(key);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }

        EntityTag eTag = new EntityTag(Objects.toString(result.getVersion()));
        ResponseBuilder failed = request.evaluatePreconditions(eTag);
        if (failed != null) {
            return failed.entity(result).build();
        }

        em.remove(result);

        return Response.ok(result).tag(Objects.toString(result.getVersion())).build();
    }
}
